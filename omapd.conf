<?xml version="1.0"?>
<omapd_configuration xmlns="http://config.omapd.org" version="1.0">
  <!-- log_file_location: leave empty to disable logging to file -->
  <!-- default is append="yes" -->
  <log_file_location append="yes">omapd.log</log_file_location>

  <!-- if enable="no" omapd will NOT log messages to stderr -->
  <log_stderr enable="yes"/>

  <cml_configuration>
    <!--
      ShowClientOps = 0x0001,
      ShowHTTPHeaders = 0x0002,
      ShowHTTPState = 0x0004,
      ShowRawSocketData = 0x0008
    -->
    <!-- debug_level is a OR combination of the above hex flags.  Do the math! -->
    <!-- <debug_level> default is 0x0000 (no debugging) -->
    <debug_level>000B</debug_level>
    <!-- <address> default is 127.0.0.1 -->
    <address>127.0.0.1</address>
    <!-- <port> default is 8080 -->
    <port>8080</port>

    <!-- if enable="no" all the <ssl_configuration> child elements will be ignored -->
    <!-- default is enable="yes" -->
    <ssl_configuration enable="yes">
      <!-- SSL Protocol to support = {AnyProtocol | SslV2 | NoSslV2 | SslV3 | TlsV1} -->
      <ssl_protocol>NoSslV2</ssl_protocol>
      <!-- format attribute values = {pem | der} -->
      <certificate_file format="pem">server.pem</certificate_file>
      <ca_certificates_file format="pem">cacerts.pem</ca_certificates_file>

      <!-- use attribute password="password" to set private_key password -->
      <private_key_file>server.key</private_key_file>

      <!-- if enable="yes" a client MUST present a certificate to the server,
           but it still won't be validated -->
      <!-- default is enable="no" -->
      <require_client_certificates enable="no"/>
    </ssl_configuration>
  </cml_configuration>

  <ifmap_configuration>
    <!--
	SupportIfmapV10 = 0x01,
	SupportIfmapV11 = 0x02
    -->
    <!-- ifmap_version_support is a OR combination of the above hex flags.  Do the math! -->
    <!-- default is 03 -->
    <version_support>03</version_support>

    <!--
        ShowClientOps = 0x0001,
        ShowXML = 0x0002,
        ShowHTTPHeaders = 0x0004,
        ShowHTTPState = 0x0008,
        ShowXMLParsing = 0x0010,
        ShowXMLFilterResults = 0x0020,
        ShowXMLFilterStatements = 0x0040,
        ShowMAPGraphAfterChange = 0x0080,
        ShowRawSocketData = 0x0100
    -->
    <!-- debug_level is a OR combination of the above hex flags.  Do the math! -->
    <!-- <debug_level> default is 0x0000 (no debugging) -->
    <debug_level>00E3</debug_level>
    <!-- <address> default is QHostAddress::Any -->
    <address>0.0.0.0</address>
    <!-- <port> default is 8081 -->
    <port>8081</port>

    <!-- if enable="no" all the <ssl_configuration> child elements will be ignored -->
    <!-- default is enable="no" -->
    <ssl_configuration enable="yes">
      <!-- SSL Protocol to support = {AnyProtocol | SslV2 | NoSslV2 | SslV3 | TlsV1} -->
      <ssl_protocol>NoSslV2</ssl_protocol>
      <!-- format attribute values = {pem | der} -->
      <certificate_file format="pem">server.pem</certificate_file>
      <ca_certificates_file format="pem">cacerts.pem</ca_certificates_file>

      <!-- use attribute password="password" to set private_key password -->
      <private_key_file>server.key</private_key_file>

      <!-- if enable="yes" a client MUST present a certificate to the server,
           but it still won't be validated -->
      <!-- default is enable="no" -->
      <require_client_certificates enable="no"/>
    </ssl_configuration>

    <!-- enable="yes" creates a client configurations based on the http
         basic auth value if present, or else the client's src IP address. -->
    <!-- default is enable="yes" -->
    <create_client_configurations enable="yes"/>

    <!-- allow="yes" allows curl to easily be used to slurp in MAP data -->
    <!-- default is allow="no" -->
    <allow_invalid_session_id allow="yes"/>
  </ifmap_configuration>
</omapd_configuration>
